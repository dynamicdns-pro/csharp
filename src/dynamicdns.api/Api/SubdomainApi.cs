/*
 * Dynamicdns.pro
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using dynamicdns.api.Client;
using dynamicdns.api.Model;

namespace dynamicdns.api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface ISubdomainApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="dynamicdns.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subdomain"></param>
        /// <param name="updateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Update200Response</returns>
        Update200Response Update(string subdomain, UpdateRequest? updateRequest = default(UpdateRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dynamicdns.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subdomain"></param>
        /// <param name="updateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Update200Response</returns>
        ApiResponse<Update200Response> UpdateWithHttpInfo(string subdomain, UpdateRequest? updateRequest = default(UpdateRequest?), int operationIndex = 0);
        /// <summary>
        /// update the ip address with the connecting ip address
        /// </summary>
        /// <exception cref="dynamicdns.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subdomain"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Updateip200Response</returns>
        Updateip200Response Updateip(string subdomain, Object? body = default(Object?), int operationIndex = 0);

        /// <summary>
        /// update the ip address with the connecting ip address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dynamicdns.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subdomain"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Updateip200Response</returns>
        ApiResponse<Updateip200Response> UpdateipWithHttpInfo(string subdomain, Object? body = default(Object?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface ISubdomainApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dynamicdns.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subdomain"></param>
        /// <param name="updateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Update200Response</returns>
        System.Threading.Tasks.Task<Update200Response> UpdateAsync(string subdomain, UpdateRequest? updateRequest = default(UpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dynamicdns.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subdomain"></param>
        /// <param name="updateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Update200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Update200Response>> UpdateWithHttpInfoAsync(string subdomain, UpdateRequest? updateRequest = default(UpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// update the ip address with the connecting ip address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dynamicdns.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subdomain"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Updateip200Response</returns>
        System.Threading.Tasks.Task<Updateip200Response> UpdateipAsync(string subdomain, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// update the ip address with the connecting ip address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dynamicdns.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subdomain"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Updateip200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Updateip200Response>> UpdateipWithHttpInfoAsync(string subdomain, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface ISubdomainApi : ISubdomainApiSync, ISubdomainApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal partial class SubdomainApi : ISubdomainApi
    {
        private dynamicdns.api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubdomainApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubdomainApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubdomainApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubdomainApi(string basePath)
        {
            this.Configuration = dynamicdns.api.Client.Configuration.MergeConfigurations(
                dynamicdns.api.Client.GlobalConfiguration.Instance,
                new dynamicdns.api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new dynamicdns.api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new dynamicdns.api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = dynamicdns.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubdomainApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubdomainApi(dynamicdns.api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = dynamicdns.api.Client.Configuration.MergeConfigurations(
                dynamicdns.api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new dynamicdns.api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new dynamicdns.api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = dynamicdns.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubdomainApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SubdomainApi(dynamicdns.api.Client.ISynchronousClient client, dynamicdns.api.Client.IAsynchronousClient asyncClient, dynamicdns.api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = dynamicdns.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public dynamicdns.api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public dynamicdns.api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public dynamicdns.api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public dynamicdns.api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dynamicdns.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subdomain"></param>
        /// <param name="updateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Update200Response</returns>
        public Update200Response Update(string subdomain, UpdateRequest? updateRequest = default(UpdateRequest?), int operationIndex = 0)
        {
            dynamicdns.api.Client.ApiResponse<Update200Response> localVarResponse = UpdateWithHttpInfo(subdomain, updateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dynamicdns.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subdomain"></param>
        /// <param name="updateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Update200Response</returns>
        public dynamicdns.api.Client.ApiResponse<Update200Response> UpdateWithHttpInfo(string subdomain, UpdateRequest? updateRequest = default(UpdateRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'subdomain' is set
            if (subdomain == null)
            {
                throw new dynamicdns.api.Client.ApiException(400, "Missing required parameter 'subdomain' when calling SubdomainApi->Update");
            }

            dynamicdns.api.Client.RequestOptions localVarRequestOptions = new dynamicdns.api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dynamicdns.api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dynamicdns.api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subdomain", dynamicdns.api.Client.ClientUtils.ParameterToString(subdomain)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "SubdomainApi.Update";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (http) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Update200Response>("/{subdomain}/record", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Update", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dynamicdns.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subdomain"></param>
        /// <param name="updateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Update200Response</returns>
        public async System.Threading.Tasks.Task<Update200Response> UpdateAsync(string subdomain, UpdateRequest? updateRequest = default(UpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            dynamicdns.api.Client.ApiResponse<Update200Response> localVarResponse = await UpdateWithHttpInfoAsync(subdomain, updateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="dynamicdns.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subdomain"></param>
        /// <param name="updateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Update200Response)</returns>
        public async System.Threading.Tasks.Task<dynamicdns.api.Client.ApiResponse<Update200Response>> UpdateWithHttpInfoAsync(string subdomain, UpdateRequest? updateRequest = default(UpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subdomain' is set
            if (subdomain == null)
            {
                throw new dynamicdns.api.Client.ApiException(400, "Missing required parameter 'subdomain' when calling SubdomainApi->Update");
            }


            dynamicdns.api.Client.RequestOptions localVarRequestOptions = new dynamicdns.api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dynamicdns.api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dynamicdns.api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subdomain", dynamicdns.api.Client.ClientUtils.ParameterToString(subdomain)); // path parameter
            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "SubdomainApi.Update";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (http) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Update200Response>("/{subdomain}/record", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Update", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update the ip address with the connecting ip address 
        /// </summary>
        /// <exception cref="dynamicdns.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subdomain"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Updateip200Response</returns>
        public Updateip200Response Updateip(string subdomain, Object? body = default(Object?), int operationIndex = 0)
        {
            dynamicdns.api.Client.ApiResponse<Updateip200Response> localVarResponse = UpdateipWithHttpInfo(subdomain, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update the ip address with the connecting ip address 
        /// </summary>
        /// <exception cref="dynamicdns.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subdomain"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Updateip200Response</returns>
        public dynamicdns.api.Client.ApiResponse<Updateip200Response> UpdateipWithHttpInfo(string subdomain, Object? body = default(Object?), int operationIndex = 0)
        {
            // verify the required parameter 'subdomain' is set
            if (subdomain == null)
            {
                throw new dynamicdns.api.Client.ApiException(400, "Missing required parameter 'subdomain' when calling SubdomainApi->Updateip");
            }

            dynamicdns.api.Client.RequestOptions localVarRequestOptions = new dynamicdns.api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dynamicdns.api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dynamicdns.api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subdomain", dynamicdns.api.Client.ClientUtils.ParameterToString(subdomain)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SubdomainApi.Updateip";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (http) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Updateip200Response>("/{subdomain}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Updateip", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update the ip address with the connecting ip address 
        /// </summary>
        /// <exception cref="dynamicdns.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subdomain"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Updateip200Response</returns>
        public async System.Threading.Tasks.Task<Updateip200Response> UpdateipAsync(string subdomain, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            dynamicdns.api.Client.ApiResponse<Updateip200Response> localVarResponse = await UpdateipWithHttpInfoAsync(subdomain, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update the ip address with the connecting ip address 
        /// </summary>
        /// <exception cref="dynamicdns.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subdomain"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Updateip200Response)</returns>
        public async System.Threading.Tasks.Task<dynamicdns.api.Client.ApiResponse<Updateip200Response>> UpdateipWithHttpInfoAsync(string subdomain, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subdomain' is set
            if (subdomain == null)
            {
                throw new dynamicdns.api.Client.ApiException(400, "Missing required parameter 'subdomain' when calling SubdomainApi->Updateip");
            }


            dynamicdns.api.Client.RequestOptions localVarRequestOptions = new dynamicdns.api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = dynamicdns.api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = dynamicdns.api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subdomain", dynamicdns.api.Client.ClientUtils.ParameterToString(subdomain)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SubdomainApi.Updateip";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (http) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Updateip200Response>("/{subdomain}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Updateip", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
